[{"title":"Fetch封装","url":"/2018/09/06/Fetch封装/","content":"\n# Fetch封装\n\n```\nimport { message } from 'antd';\n\nfunction post(url,params,callback,headers) {\n    console.log('post-请求接口:' + url);\n    console.log('请求参数:' + JSON.stringify(params));\n    if (!headers) {\n        headers={\n            'Accept': 'application/json', // 通过头指定，获取的数据类型是JSON\n            'Content-Type': 'application/json',\n        }\n    }\n    let fetchOptions = {\n        method:\"POST\",\n        headers: headers,\n        body:JSON.stringify(params)\n    };\n    fetch(url,fetchOptions).then((response)=>response.json()).then((obj)=>{\n        if(obj.code == 200){\n            callback(obj);\n        }else{\n            message.error(obj.msg);\n        }\n\n    })\n\n}\n\nfunction get(url,callback,headers) {\n    console.log('get-请求接口:' + url);\n    if (!headers) {\n        headers={\n            'Accept': 'application/json', // 通过头指定，获取的数据类型是JSON\n            'Content-Type': 'application/json',\n        }\n    }\n    let fetchOptions = {\n        method:\"GET\",\n        headers: headers,\n    };\n    fetch(url,fetchOptions).then((response) => response.json())\n        .then((obj)=>{\n            if(obj.code == 200){\n                callback(obj.data);\n            }else{\n                message.error(obj.msg);\n            }\n        })\n\n\n}\nexport default {\n    get:get,\n    post:post\n};\n```\n\n"},{"title":"react项目构建及配置(create-react-app)","url":"/2018/09/06/react项目构建及配置-create-react-app/","content":"\n# react项目构建及配置(create-react-app)\n\n## 一、**命令行依次输入如下的命令**\n\n```\nnpm install -g create-react-app\ncreate-react-app my-app\n\ncd my-app\nnpm start\n```\n\n创建完成后文件的结构如下：\n\n ![img](https://images-cdn.shimo.im/fl3lYIPljbMFwXTq/image.png!thumbnail) \n\n\n\n## **二、public文件**\n\npublic/favicon.ico           \n\nhtml的ico 图标，在index.html中会有引入；\n\n可以使用图片，通过线上ico图标制作出，\n\n.ico图标来替换react默认的public/manifest.json      \n\napp配置文件，设置icons，首页路径等； \n\n\n\n## 三、**src文件夹**\n\nsrc/index.js 是入口文件\n\nsrc/App.js是最大的组件App\n\nsrc/registerserviceworker.js 用来做资源离线的缓存，\n\n注意：registerServiceWorker注册的service worker 只在生产环境(正式环境)中生效。 \n\n\n\n## 四、**四个命令**\n\n① npm start 启动项目，在 <http://localhost:3000>查看项目运行 \n\n\n\n② npm run build 项目打包，生成一个build文件夹，如下 \n\n![img](https://images-cdn.shimo.im/0rM65DV2o4MSpnoS/image.png!thumbnail) \n\n\n\n③ npm run eject 弹出配置文件--不可逆操作--用于修改默认的配置\n\n当对react-script配置好的构建工具和配置项不满意时使用这个命令，他将命令运行的脚本js分离出来，输入命令时指向的是这些脚本，你可以根据情况调整这些代码。 \n\n\n\n④ npm test --测试 \n\n\n\n## 五、**antd-mobile/antd 配置**\n\n### 1、安装antd/antd-mobile\n\n```\nnpm install antd --save\n//或者\nnpm install antd-mobile --save\n```\n\n\n\n### 2、引入 [react-app-rewired](https://github.com/timarney/react-app-rewired) 并修改 package.json 里的启动配置:\n\n```\nnpm install react-app-rewired --save-dev\n```\n\n```\n/* package.json */\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test --env=jsdom\",\n+   \"test\": \"react-app-rewired test --env=jsdom\",\n}\n```\n\n\n\n### 3、然后在项目根目录创建一个 config-overrides.js 用于修改默认配置。\n\n```\nmodule.exports = function override(config, env) {\n  // do stuff with the webpack config...\n  return config;\n};\n```\n\n###  \n\n### 4、安装 babel-plugin-import\n\n [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 是一个用于按需加载组件代码和样式的 babel 插件（[原理](https://ant.design/docs/react/getting-started-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD)），现在我们尝试安装它并修改 config-overrides.js 文件。 \n\n```\nnpm install babel-plugin-import --save-dev\n```\n\n```\n+ const { injectBabelPlugin } = require('react-app-rewired');\n  module.exports = function override(config, env) {\n+   config = injectBabelPlugin(['import', { libraryName: 'antd-mobile', style: 'css' }], config);\n    return config;\n  };\n```\n\n\n\n### 5、组件内引用\n\n```\n- import Button from 'antd-mobile/lib/button';\n+ import { Button } from 'antd-mobile';\n```\n\n\n\n## 六、**less 配置**\n\n### 1.安装所需less依赖\n\n```\nnpm install less-loader less --save-dev\n```\n\n\n\n### 2.安装react-app-rewire-less\n\n```\nnpm install --save-dev react-app-rewire-less\n```\n\n\n\n### 3.根目录下找到刚才的config-overrides.js 继续修改配置\n\n```\n/* config-overrides.js */\nconst { injectBabelPlugin } = require('react-app-rewired');\n+ const rewireLess = require('react-app-rewire-less');\n\nmodule.exports = function override(config, env) {\n    config = injectBabelPlugin(['import', { libraryName: 'antd', libraryDirectory: 'es', style: 'css' }], config);\n    + config = rewireLess.withLoaderOptions({modifyVars: { \"@primary-color\": \"#1DA57A\" }})(config, env);\n    return config;\n};\n```\n\n\n\n## 七、**antd-mobile/antd 配置（弹出内建配置）**\n\n### 1.弹出配置文件\n\n```\nnpm run eject\n```\n\n弹出的配置文件如下，弹出了config文件夹和scripts文件夹\n\nconfig文件夹----中的配置文件可供修改\n\nscripts文件夹----作为命令对应要运行的文件 \n\n![img](https://images-cdn.shimo.im/SB0P0bSCpuAJ7agy/image.png!thumbnail) \n\n弹出后注意修改package.json 里启动命令的配置 \n\n```\n\"scripts\": {\n    \"start\": \"node scripts/start.js\",\n    \"build\": \"node scripts/build.js\",\n    \"test\": \"node scripts/test.js --env=jsdom\"\n  },\n```\n\n\n\n### 2.安装antd/antd-mobile\n\n```\nnpm install antd --save\n//或者\nnpm install antd-mobile --save\n```\n\n\n\n### 3.安装 babel-plugin-import\n\n```\nnpm install babel-plugin-import --save-dev\n```\n\n\n\n### 4.修改package.json文件\n\n```\n\"babel\": {\n  \"presets\": [\n    \"react-app\"\n  ],\n+  \"plugins\": [\n+     [\n+       \"import\",\n+      {\n+         \"libraryName\": \"antd\",\n+         \"style\": \"css\"\n+       }\n+     ]\n+  ],\n},\n```\n\n\n\n或者根目录下新建一个.babelrc，\n\n写入如下的代码，这个文件将把package.json的babel的配置对象完全覆盖掉 \n\n```\n{\n   \"presets\": [\n      \"react-app\"\n    ],\n    \"plugins\": [\n      [\n        \"import\",\n        {\n          \"libraryName\": \"antd\",\n          \"style\": \"css\"\n        }\n      ]\n    ]\n}\n```\n\n\n\n## 八、**less 配置（弹出内建配置）**\n\n### 1.安装所需less依赖\n\n```\nnpm install less-loader less --save-dev\n```\n\n\n\n### 2.修改配置文件\n\n找到根目录下的config文件夹下的webpack.config.dev.js 和 webpack.config-prod.js\n\nexclude的数组中/\\.css$/ 改为 /\\.(css|less)$/\n\n /\\.(css|less)$/下的use数组中增加less-loader \n\n```\nuse: [\n  {\n    loader: require.resolve('css-loader'),\n    options: {\n      importLoaders: 1,\n      minimize: true,\n      sourceMap: shouldUseSourceMap,\n    },\n  },\n  {\n    loader: require.resolve('postcss-loader'),\n    options: {\n      // Necessary for external CSS imports to work\n      // https://github.com/facebookincubator/create-react-app/issues/2677\n      ident: 'postcss',\n      plugins: () => [\n        require('postcss-flexbugs-fixes'),\n        autoprefixer({\n          browsers: [\n            '>1%',\n            'last 4 versions',\n            'Firefox ESR',\n            'not ie < 9', // React doesn't support IE8 anyway\n          ],\n          flexbox: 'no-2009',\n        }),\n      ],\n    },\n  },\n+ {\n+     loader: require.resolve('less-loader') // compiles Less to CSS\n+ }\n],\n```\n\n"},{"title":"React-Router","url":"/2018/08/14/React-Router/","content":"\n# React-Router 的基本应用\n\n## **react-router  vs  react-router-dom**\n\nNote: This package provides the core routing functionality for React Router, but you might not want to install it directly. If you are writing an application that will run in the browser, you should instead install react-router-dom. Similarly, if you are writing a React Native application, you should instead install react-router-native. Both of those will install react-router as a dependency.﻿![img](https://images-cdn.shimo.im/qMWFSzthHnU49CvC/image.png!thumbnail)﻿\n\n​\t官方文档：<https://reacttraining.com/react-router/web/guides/philosophy>\n\n\n\n## **快速上手**\n\n### 命令行依次输入\n\n```\n//项目构建\nnpm install -g create-react-app\ncreate-react-app demo-app\ncd demo-app\n\n//安装react-router-dom\nnpm install react-router-dom\n```\n### 入口文件路由配置(index.js)\n\n```\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom'\n\n//这里使用引入的App组件\nimport App from './App';\n\nReactDOM.render((\n    <HashRouter>\n        <Route path='/' component={App}/>\n    </HashRouter>\n), document.getElementById('root'));\n```\n### App组件中定义路由\n\n```\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>这是头部公共部分</header>\n        <div>\n            {/*路由配置*/}\n            <Switch>\n                <Route path='/list/:index' component={List}/>\n                <Route path='/detail/:id' component={Detail}/>\n                <Route exact path='/' component={Home}/>\n            </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n### 总结\n\n- 核心思想：router 是一个组件容器，可以装一部分公共部分，可以在剩下需要切换的部分直接进行路由配置。\n- Switch：当某一路由同时符合多个路由规则会带来麻烦，当我们需要一个路由只为一匹配一个路由规则时，需要switch，switch匹配到一个后不再继续匹配后面的，精准匹配需要给route添加exact属性。\n\n\n\n## 路由传值\n\n### params传值\n\n路由配置\n\n```\n<Route path='/detail/:id' component={Detail}/>\n```\n\n\n\n跳转页面\n\n```\n<Link to={'/detail/2'} >XXXX</Link>\n//或者\nthis.props.history.push(\"/detail/2\")\n```\n\n\n\n获取页面\n\n```\nthis.props.match.params.id\n```\n\n\n\n当然也可以传多个\n\n```\n<Route exact path=\"/rgb/:r/:g/:b\" component={RGB} />\nthis.props.match.params.r\nthis.props.match.params.g\nthis.props.match.params.b\n```\n\n\n\n### query传值\n\n注意：路由配置不需要修改，传递一个对象，对象属性包含pathname 和 query ，query属性的值是要传递的对象。\n\n跳转页面\n\n```\n<Link to={{ pathname: '/detail',query:{type:'sex'}}}>XXXX</Link>\n//或者\nthis.props.history.push({pathname:'/detail',query:{type:'sex'}})\n```\n\n获取页面\n\n```\nthis.props.location.query.sex//建议不用 刷新页面时 丢失\n```\n\n\n\n### state传值--秘密传递\n\n注意：同query相似，state传的参数不可见，query传的参数在地址栏可见；\n\n跳转页面\n\n```\n<Link to={{ pathname: '/detail',state:{type:'sex'}}}>XXXX</Link>\n//或者\nthis.props.history.push({pathname:'/detail',state:{type:'sex'}})\n```\n\n\n\n获取页面\n\n```\nthis.props.location.state.sex//建议不用 刷新页面时 丢失\n```\n\n## 路由跳转\n\n### Link\n\n```\n<Link to=\"/detail/10003\">详情</Link>\n```\n### Push\n\n```\nthis.props.history.push(\"/\")\n```\n------\n\n"}]