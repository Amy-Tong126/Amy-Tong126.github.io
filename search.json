[{"title":"React-Router","url":"/2018/08/14/React-Router/","content":"\n# React-Router 的基本应用\n\n## **react-router  vs  react-router-dom**\n\nNote: This package provides the core routing functionality for React Router, but you might not want to install it directly. If you are writing an application that will run in the browser, you should instead install react-router-dom. Similarly, if you are writing a React Native application, you should instead install react-router-native. Both of those will install react-router as a dependency.﻿![img](https://images-cdn.shimo.im/qMWFSzthHnU49CvC/image.png!thumbnail)﻿\n\n​\t官方文档：<https://reacttraining.com/react-router/web/guides/philosophy>\n\n\n\n## **快速上手**\n\n### 命令行依次输入\n\n```\n//项目构建\nnpm install -g create-react-app\ncreate-react-app demo-app\ncd demo-app\n\n//安装react-router-dom\nnpm install react-router-dom\n```\n### 入口文件路由配置(index.js)\n\n```\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom'\n\n//这里使用引入的App组件\nimport App from './App';\n\nReactDOM.render((\n    <HashRouter>\n        <Route path='/' component={App}/>\n    </HashRouter>\n), document.getElementById('root'));\n```\n### App组件中定义路由\n\n```\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>这是头部公共部分</header>\n        <div>\n            {/*路由配置*/}\n            <Switch>\n                <Route path='/list/:index' component={List}/>\n                <Route path='/detail/:id' component={Detail}/>\n                <Route exact path='/' component={Home}/>\n            </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n### 总结\n\n- 核心思想：router 是一个组件容器，可以装一部分公共部分，可以在剩下需要切换的部分直接进行路由配置。\n- Switch：当某一路由同时符合多个路由规则会带来麻烦，当我们需要一个路由只为一匹配一个路由规则时，需要switch，switch匹配到一个后不再继续匹配后面的，精准匹配需要给route添加exact属性。\n\n\n\n## 路由传值\n\n### params传值\n\n路由配置\n\n```\n<Route path='/detail/:id' component={Detail}/>\n```\n\n\n\n跳转页面\n\n```\n<Link to={'/detail/2'} >XXXX</Link>\n//或者\nthis.props.history.push(\"/detail/2\")\n```\n\n\n\n获取页面\n\n```\nthis.props.match.params.id\n```\n\n\n\n当然也可以传多个\n\n```\n<Route exact path=\"/rgb/:r/:g/:b\" component={RGB} />\nthis.props.match.params.r\nthis.props.match.params.g\nthis.props.match.params.b\n```\n\n\n\n### query传值\n\n注意：路由配置不需要修改，传递一个对象，对象属性包含pathname 和 query ，query属性的值是要传递的对象。\n\n跳转页面\n\n```\n<Link to={{ pathname: '/detail',query:{type:'sex'}}}>XXXX</Link>\n//或者\nthis.props.history.push({pathname:'/detail',query:{type:'sex'}})\n```\n\n获取页面\n\n```\nthis.props.location.query.sex//建议不用 刷新页面时 丢失\n```\n\n\n\n### state传值--秘密传递\n\n注意：同query相似，state传的参数不可见，query传的参数在地址栏可见；\n\n跳转页面\n\n```\n<Link to={{ pathname: '/detail',state:{type:'sex'}}}>XXXX</Link>\n//或者\nthis.props.history.push({pathname:'/detail',state:{type:'sex'}})\n```\n\n\n\n获取页面\n\n```\nthis.props.location.state.sex//建议不用 刷新页面时 丢失\n```\n\n## 路由跳转\n\n### Link\n\n```\n<Link to=\"/detail/10003\">详情</Link>\n```\n### Push\n\n```\nthis.props.history.push(\"/\")\n```\n------\n\n"}]